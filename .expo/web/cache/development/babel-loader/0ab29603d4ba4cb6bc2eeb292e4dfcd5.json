{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0]\n};\n\nvar SharedElementSceneData = function () {\n  function SharedElementSceneData(Component, getSharedElements, route, navigatorId, nestingDepth, debug) {\n    _classCallCheck(this, SharedElementSceneData);\n\n    this.updateSubscribers = new Set();\n    this.ancestorNode = undefined;\n    this.nodes = {};\n    this.getSharedElements = getSharedElements;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.debug = debug;\n    this.name = Component.displayName || Component.name || (Component.constructor ? Component.constructor.name : undefined) || \"\";\n  }\n\n  _createClass(SharedElementSceneData, [{\n    key: \"updateRoute\",\n    value: function updateRoute(route) {\n      if (route.key !== this.route.key) {\n        throw new Error(\"SharedElementNavigation: Integrity error, route key should never change\");\n      }\n\n      this.route = route;\n    }\n  }, {\n    key: \"setAnimimationContextValue\",\n    value: function setAnimimationContextValue(value) {\n      this.animationContextValue = value;\n    }\n  }, {\n    key: \"getAnimValue\",\n    value: function getAnimValue(closing) {\n      var animationContextValue = this.animationContextValue;\n      if (!animationContextValue) return;\n      var progress = animationContextValue.current.progress;\n      return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n    }\n  }, {\n    key: \"getAncestor\",\n    value: function getAncestor() {\n      return this.ancestorNode;\n    }\n  }, {\n    key: \"setAncestor\",\n    value: function setAncestor(ancestorNode) {\n      if (this.ancestorNode === ancestorNode) return;\n      this.ancestorNode = ancestorNode || undefined;\n      this.emitUpdateEvent(\"ancestor\", this.ancestorNode, \"\");\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(id, node) {\n      this.nodes[id] = node;\n      this.emitUpdateEvent(\"add\", node, id);\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(id, node) {\n      delete this.nodes[id];\n      this.emitUpdateEvent(\"remove\", node, id);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(id) {\n      return this.nodes[id];\n    }\n  }, {\n    key: \"addUpdateListener\",\n    value: function addUpdateListener(handler) {\n      var _this = this;\n\n      this.updateSubscribers.add(handler);\n      return function () {\n        return _this.updateSubscribers.delete(handler);\n      };\n    }\n  }, {\n    key: \"emitUpdateEvent\",\n    value: function emitUpdateEvent(eventType, node, id) {\n      this.updateSubscribers.forEach(function (handler) {\n        return handler(eventType, node, id);\n      });\n    }\n  }]);\n\n  return SharedElementSceneData;\n}();\n\nexport { SharedElementSceneData as default };","map":{"version":3,"sources":["../src/SharedElementSceneData.ts"],"names":[],"mappings":";;AAoBA,IAAM,cAAc,GAAG;EACrB,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADS;EAErB,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFQ,CAAvB;;IAWqB,sB;EAcnB,gCACE,SADF,EAEE,iBAFF,EAGE,KAHF,EAIE,WAJF,EAKE,YALF,EAME,KANF,EAMgB;IAAA;;IAAA,KAnBR,iBAmBQ,GAnBY,IAAI,GAAJ,EAmBZ;IAAA,KAlBR,YAkBQ,GAlB2B,SAkB3B;IAAA,KAjBR,KAiBQ,GAfZ,EAeY;IAEd,KAAK,iBAAL,GAAyB,iBAAzB;IACA,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,YAAL,GAAoB,YAApB;IACA,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,IAAL,GACE,SAAS,CAAC,WAAV,IACA,SAAS,CAAC,IADV,KAEC,SAAS,CAAC,WAAV,GAAwB,SAAS,CAAC,WAAV,CAAsB,IAA9C,GAAqD,SAFtD,KAGA,EAJF;EAKD;;;;WAEM,qBAAY,KAAZ,EAAqC;MAC1C,IAAI,KAAK,CAAC,GAAN,KAAc,KAAK,KAAL,CAAW,GAA7B,EAAkC;QAChC,MAAM,IAAI,KAAJ,CACJ,yEADI,CAAN;MAGD;;MAED,KAAK,KAAL,GAAa,KAAb;IACD;;;WAED,oCAA2B,KAA3B,EAAqC;MACnC,KAAK,qBAAL,GAA6B,KAA7B;IACD;;;WAED,sBAAa,OAAb,EAA6B;MAC3B,IAAQ,qBAAR,GAAkC,IAAlC,CAAQ,qBAAR;MACA,IAAI,CAAC,qBAAL,EAA4B;MAC5B,IAAQ,QAAR,GAAqB,qBAAqB,CAAC,OAA3C,CAAQ,QAAR;MACA,OAAO,OAAO,GAAG,QAAQ,CAAC,WAAT,CAAqB,cAArB,CAAH,GAA0C,QAAxD;IACD;;;WAED,uBAAW;MACT,OAAO,KAAK,YAAZ;IACD;;;WAED,qBAAY,YAAZ,EAAkD;MAEhD,IAAI,KAAK,YAAL,KAAsB,YAA1B,EAAwC;MACxC,KAAK,YAAL,GAAoB,YAAY,IAAI,SAApC;MACA,KAAK,eAAL,CAAqB,UAArB,EAAiC,KAAK,YAAtC,EAAoD,EAApD;IACD;;;WAED,iBAAQ,EAAR,EAAoB,IAApB,EAA2C;MAEzC,KAAK,KAAL,CAAW,EAAX,IAAiB,IAAjB;MACA,KAAK,eAAL,CAAqB,KAArB,EAA4B,IAA5B,EAAkC,EAAlC;IACD;;;WAED,oBAAW,EAAX,EAAuB,IAAvB,EAA8C;MAE5C,OAAO,KAAK,KAAL,CAAW,EAAX,CAAP;MACA,KAAK,eAAL,CAAqB,QAArB,EAA+B,IAA/B,EAAqC,EAArC;IACD;;;WAED,iBAAQ,EAAR,EAAkB;MAChB,OAAO,KAAK,KAAL,CAAW,EAAX,CAAP;IACD;;;WAED,2BACE,OADF,EAC0C;MAAA;;MAExC,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B;MACA,OAAO;QAAA,OAAM,KAAI,CAAC,iBAAL,CAAuB,MAAvB,CAA8B,OAA9B,CAAN;MAAA,CAAP;IACD;;;WAEO,yBACN,SADM,EAEN,IAFM,EAGN,EAHM,EAGI;MAEV,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,UAAC,OAAD;QAAA,OAAa,OAAO,CAAC,SAAD,EAAY,IAAZ,EAAkB,EAAlB,CAApB;MAAA,CAA/B;IACD;;;;;;SA/FkB,sB","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementEventSubscription,\n  SharedElementAnimatedValue,\n  SharedElementRoute,\n  SharedElementSceneComponent,\n  SharedElementsComponentConfig,\n} from \"./types\";\n\nexport type SharedElementSceneUpdateHandlerEventType =\n  | \"ancestor\"\n  | \"add\"\n  | \"remove\";\n\nexport type SharedElementSceneUpdateHandler = (\n  eventType: SharedElementSceneUpdateHandlerEventType,\n  node: SharedElementNode | undefined,\n  id: string\n) => any;\n\nconst INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0],\n};\n\nexport type SharedElementSceneEventType =\n  | \"willFocus\"\n  | \"didFocus\"\n  | \"willBlur\"\n  | \"didBlur\";\n\nexport default class SharedElementSceneData {\n  private updateSubscribers = new Set<SharedElementSceneUpdateHandler>();\n  private ancestorNode?: SharedElementNode = undefined;\n  private nodes: {\n    [key: string]: SharedElementNode;\n  } = {};\n  private animationContextValue: any;\n  public readonly getSharedElements: () => SharedElementsComponentConfig | void;\n  public readonly name: string;\n  public readonly navigatorId: string;\n  public readonly nestingDepth: number;\n  public readonly debug: boolean;\n  public readonly route: SharedElementRoute;\n\n  constructor(\n    Component: SharedElementSceneComponent,\n    getSharedElements: () => SharedElementsComponentConfig | void,\n    route: SharedElementRoute,\n    navigatorId: string,\n    nestingDepth: number,\n    debug: boolean\n  ) {\n    this.getSharedElements = getSharedElements;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.debug = debug;\n    this.name =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor ? Component.constructor.name : undefined) ||\n      \"\";\n  }\n\n  public updateRoute(route: SharedElementRoute) {\n    if (route.key !== this.route.key) {\n      throw new Error(\n        \"SharedElementNavigation: Integrity error, route key should never change\"\n      );\n    }\n    // @ts-ignore\n    this.route = route;\n  }\n\n  setAnimimationContextValue(value: any) {\n    this.animationContextValue = value;\n  }\n\n  getAnimValue(closing: boolean): SharedElementAnimatedValue | undefined {\n    const { animationContextValue } = this;\n    if (!animationContextValue) return;\n    const { progress } = animationContextValue.current;\n    return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n  }\n\n  getAncestor(): SharedElementNode | undefined {\n    return this.ancestorNode;\n  }\n\n  setAncestor(ancestorNode: SharedElementNode | null) {\n    // console.log('SharedElementSceneData.setAncestor');\n    if (this.ancestorNode === ancestorNode) return;\n    this.ancestorNode = ancestorNode || undefined;\n    this.emitUpdateEvent(\"ancestor\", this.ancestorNode, \"\");\n  }\n\n  addNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.addNode: ', id);\n    this.nodes[id] = node;\n    this.emitUpdateEvent(\"add\", node, id);\n  }\n\n  removeNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.removeNode: ', id);\n    delete this.nodes[id];\n    this.emitUpdateEvent(\"remove\", node, id);\n  }\n\n  getNode(id: string): SharedElementNode | undefined {\n    return this.nodes[id];\n  }\n\n  addUpdateListener(\n    handler: SharedElementSceneUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(\n    eventType: SharedElementSceneUpdateHandlerEventType,\n    node: SharedElementNode | undefined,\n    id: string\n  ): void {\n    this.updateSubscribers.forEach((handler) => handler(eventType, node, id));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}