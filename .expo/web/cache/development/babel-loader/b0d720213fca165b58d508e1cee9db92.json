{"ast":null,"code":"import { NavigationContext } from \"@react-navigation/native\";\nimport * as React from \"react\";\nexport function useSharedElementFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useLayoutEffect(function () {\n    return navigation == null ? void 0 : navigation.addListener(\"focus\", function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit(\"focus\", currentFocusedKey);\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useLayoutEffect(function () {\n    return navigation == null ? void 0 : navigation.addListener(\"blur\", function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit(\"blur\", currentFocusedKey);\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useLayoutEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit(\"focus\", currentFocusedKey);\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit(\"blur\", lastFocusedKey);\n    emitter.emit(\"focus\", currentFocusedKey);\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["../src/SharedElementFocusEvents.tsx"],"names":[],"mappings":"AAAA,SACE,iBADF,QAGO,0BAHP;AAIA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAWA,OAAM,SAAU,2BAAV,OAQL;EAAA,IALC,KAKD,QALC,KAKD;EAAA,IAJC,OAID,QAJC,OAID;EACC,IAAM,UAAU,GAAG,KAAK,CAAC,UAAN,CAAiB,iBAAjB,CAAnB;EACA,IAAM,iBAAiB,GAAG,KAAK,CAAC,MAAN,EAA1B;EAEA,IAAM,iBAAiB,GAAG,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,KAAnB,EAA0B,GAApD;EAIA,KAAK,CAAC,eAAN,CACE;IAAA,OACE,UADF,oBACE,UAAU,CAAE,WAAZ,CAAwB,OAAxB,EAAiC,YAAK;MACpC,iBAAiB,CAAC,OAAlB,GAA4B,iBAA5B;MACA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,iBAAtB;IACD,CAHD,CADF;EAAA,CADF,EAME,CAAC,iBAAD,EAAoB,OAApB,EAA6B,UAA7B,CANF;EASA,KAAK,CAAC,eAAN,CACE;IAAA,OACE,UADF,oBACE,UAAU,CAAE,WAAZ,CAAwB,MAAxB,EAAgC,YAAK;MACnC,iBAAiB,CAAC,OAAlB,GAA4B,SAA5B;MACA,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,iBAArB;IACD,CAHD,CADF;EAAA,CADF,EAME,CAAC,iBAAD,EAAoB,OAApB,EAA6B,UAA7B,CANF;EASA,KAAK,CAAC,eAAN,CAAsB,YAAK;IACzB,IAAM,cAAc,GAAG,iBAAiB,CAAC,OAAzC;IAEA,iBAAiB,CAAC,OAAlB,GAA4B,iBAA5B;;IAIA,IAAI,cAAc,KAAK,SAAnB,IAAgC,CAAC,UAArC,EAAiD;MAC/C,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,iBAAtB;IACD;;IAID,IACE,cAAc,KAAK,iBAAnB,IACA,EAAE,UAAU,GAAG,UAAU,CAAC,SAAX,EAAH,GAA4B,IAAxC,CAFF,EAGE;MACA;IACD;;IAED,IAAI,cAAc,KAAK,SAAvB,EAAkC;MAEhC;IACD;;IAED,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,cAArB;IACA,OAAO,CAAC,IAAR,CAAa,OAAb,EAAsB,iBAAtB;EACD,CA3BD,EA2BG,CAAC,iBAAD,EAAoB,OAApB,EAA6B,UAA7B,CA3BH;AA4BD","sourcesContent":["import {\n  NavigationContext,\n  StackNavigationState,\n} from \"@react-navigation/native\";\nimport * as React from \"react\";\n\nimport { EventEmitter } from \"./utils/EventEmitter\";\n\n/**\n * A variation of useFocusEvents that uses a custom emitter\n * and emits events using useLayoutEffect instead of useEffect.\n * This enables shared element to respond to focus events in\n * a timely manner.\n * https://github.com/react-navigation/react-navigation/blob/master/packages/core/src/useFocusEvents.tsx\n */\nexport function useSharedElementFocusEvents<\n  ParamList extends Record<string, object | undefined>\n>({\n  state,\n  emitter,\n}: {\n  state: StackNavigationState<ParamList>;\n  emitter: EventEmitter;\n}) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useLayoutEffect(\n    () =>\n      navigation?.addListener(\"focus\", () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit(\"focus\", currentFocusedKey);\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useLayoutEffect(\n    () =>\n      navigation?.addListener(\"blur\", () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit(\"blur\", currentFocusedKey);\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useLayoutEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit(\"focus\", currentFocusedKey);\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit(\"blur\", lastFocusedKey);\n    emitter.emit(\"focus\", currentFocusedKey);\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}