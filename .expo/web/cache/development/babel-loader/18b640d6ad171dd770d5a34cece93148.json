{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar country_1 = __importDefault(require(\"./country\"));\n\nvar flags_1 = __importDefault(require(\"./resources/flags\"));\n\nvar PhoneNumber_1 = __importDefault(require(\"./PhoneNumber\"));\n\nvar styles_1 = __importDefault(require(\"./styles\"));\n\nvar CountryPicker_1 = __importDefault(require(\"./CountryPicker\"));\n\nvar PhoneInput = function (_react_1$default$Comp) {\n  _inherits(PhoneInput, _react_1$default$Comp);\n\n  var _super = _createSuper(PhoneInput);\n\n  function PhoneInput(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneInput);\n\n    _this = _super.call(this, props);\n\n    _this.onChangePhoneNumber = function (number) {\n      var actionAfterSetState = _this.props.onChangePhoneNumber ? function (displayValue, iso2) {\n        var _a, _b;\n\n        (_b = (_a = _this.props).onChangePhoneNumber) === null || _b === void 0 ? void 0 : _b.call(_a, displayValue, iso2);\n      } : null;\n\n      _this.updateValue(number, actionAfterSetState);\n    };\n\n    _this.onPressFlag = function () {\n      if (_this.props.onPressFlag) {\n        _this.props.onPressFlag();\n      } else {\n        if (_this.state.iso2) _this.picker.selectCountry(_this.state.iso2);\n\n        _this.picker.show();\n      }\n    };\n\n    _this.getFlag = function (iso2) {\n      return flags_1.default.get(iso2);\n    };\n\n    _this.getISOCode = function () {\n      return _this.state.iso2;\n    };\n\n    _this.selectCountry = function (iso2) {\n      if (_this.state.iso2 !== iso2) {\n        var countryData = PhoneNumber_1.default.getCountryDataByCode(iso2);\n\n        if (countryData) {\n          _this.setState({\n            iso2: iso2,\n            displayValue: _this.format(\"+\" + countryData.dialCode),\n            value: \"+\" + countryData.dialCode\n          }, function () {\n            if (_this.props.onSelectCountry) _this.props.onSelectCountry(iso2);\n          });\n        }\n      }\n    };\n\n    _this.setValue = function (number) {\n      if (_this.state.value !== number) {\n        _this.updateValue(number);\n      }\n    };\n\n    var _this$props = _this.props,\n        initialCountry = _this$props.initialCountry,\n        initialValue = _this$props.initialValue;\n    var _this$props2 = _this.props,\n        countriesList = _this$props2.countriesList,\n        disabled = _this$props2.disabled;\n\n    if (countriesList) {\n      country_1.default.setCustomCountriesData(countriesList);\n    }\n\n    var displayValue = '';\n\n    if (initialValue) {\n      if (initialValue[0] !== '+') {\n        initialValue = \"+\" + initialValue;\n      }\n\n      initialCountry = PhoneNumber_1.default.getCountryCodeOfNumber(initialValue);\n      displayValue = _this.format(initialValue, initialCountry);\n    } else {\n      var countryData = PhoneNumber_1.default.getCountryDataByCode(initialCountry);\n      initialValue = countryData ? \"+\" + countryData.dialCode : '';\n      displayValue = initialValue;\n    }\n\n    _this.state = {\n      disabled: disabled,\n      iso2: initialCountry,\n      displayValue: displayValue,\n      value: initialValue\n    };\n    return _this;\n  }\n\n  _createClass(PhoneInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var disabled = this.props.disabled;\n\n      if (disabled !== this.state.disabled) {\n        this.setState({\n          disabled: disabled\n        });\n      }\n    }\n  }, {\n    key: \"getPickerData\",\n    value: function getPickerData() {\n      return PhoneNumber_1.default.getAllCountries().map(function (country, index) {\n        return {\n          key: index,\n          image: flags_1.default.get(country.iso2),\n          label: country.name,\n          dialCode: \"+\" + country.dialCode,\n          iso2: country.iso2\n        };\n      });\n    }\n  }, {\n    key: \"getCountryCode\",\n    value: function getCountryCode() {\n      var countryData = PhoneNumber_1.default.getCountryDataByCode(this.state.iso2);\n      return countryData ? countryData.dialCode : null;\n    }\n  }, {\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return PhoneNumber_1.default.getAllCountries();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode() {\n      return PhoneNumber_1.default.getDialCode(this.state.value);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(text) {\n      return text ? text.replace(/[^0-9]/g, '') : this.state.value;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType() {\n      return PhoneNumber_1.default.getNumberType(this.state.value, this.state.iso2);\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber() {\n      if (this.state.value.length < 4) return false;\n      return PhoneNumber_1.default.isValidNumber(this.state.value, this.state.iso2);\n    }\n  }, {\n    key: \"format\",\n    value: function format(text, iso2) {\n      return this.props.autoFormat ? PhoneNumber_1.default.format(text, iso2 || this.state.iso2) : text;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(number) {\n      var actionAfterSetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var modifiedNumber = this.getValue(number);\n      var allowZeroAfterCountryCode = this.props.allowZeroAfterCountryCode;\n\n      if (modifiedNumber[0] !== '+' && number.length) {\n        modifiedNumber = \"+\" + modifiedNumber;\n      }\n\n      modifiedNumber = allowZeroAfterCountryCode ? modifiedNumber : this.possiblyEliminateZeroAfterCountryCode(modifiedNumber);\n      var iso2 = PhoneNumber_1.default.getCountryCodeOfNumber(modifiedNumber);\n      var countryDialCode;\n\n      if (iso2) {\n        var countryData = PhoneNumber_1.default.getCountryDataByCode(iso2);\n        countryDialCode = countryData.dialCode;\n      }\n\n      var displayValue;\n\n      if (modifiedNumber === \"+\" + countryDialCode) {\n        displayValue = modifiedNumber;\n      } else {\n        displayValue = this.format(modifiedNumber);\n      }\n\n      this.setState({\n        iso2: iso2,\n        displayValue: displayValue,\n        value: modifiedNumber\n      }, function () {\n        if (actionAfterSetState) {\n          actionAfterSetState(displayValue, iso2);\n        }\n      });\n    }\n  }, {\n    key: \"possiblyEliminateZeroAfterCountryCode\",\n    value: function possiblyEliminateZeroAfterCountryCode(number) {\n      var dialCode = PhoneNumber_1.default.getDialCode(number);\n      return number.startsWith(dialCode + \"0\") ? dialCode + number.substr(dialCode.length + 1) : number;\n    }\n  }, {\n    key: \"getAccessibilityLabel\",\n    value: function getAccessibilityLabel() {\n      return this.props.accessibilityLabel || 'Telephone input';\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.inputPhone.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputPhone.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          iso2 = _this$state.iso2,\n          displayValue = _this$state.displayValue,\n          disabled = _this$state.disabled;\n      var country = this.getAllCountries().find(function (c) {\n        return c.iso2 === iso2;\n      });\n      var TextComponent = this.props.textComponent || react_native_1.TextInput;\n      return react_1.default.createElement(react_native_1.View, {\n        style: [styles_1.default.container, this.props.style]\n      }, react_1.default.createElement(react_native_1.TouchableOpacity, {\n        onPress: this.onPressFlag,\n        disabled: disabled,\n        accessibilityRole: \"imagebutton\",\n        accessibilityLabel: country ? country.name : iso2\n      }, this.props.renderFlag ? react_1.default.createElement(react_1.default.Fragment, null, this.props.renderFlag({\n        imageSource: flags_1.default.get(iso2)\n      })) : react_1.default.createElement(react_native_1.Image, {\n        accessibilityIgnoresInvertColors: true,\n        source: flags_1.default.get(iso2),\n        style: [styles_1.default.flag, this.props.flagStyle]\n      })), react_1.default.createElement(react_native_1.View, {\n        style: {\n          flex: 1,\n          marginLeft: this.props.offset || 10\n        }\n      }, react_1.default.createElement(TextComponent, _extends({\n        ref: function ref(_ref) {\n          _this2.inputPhone = _ref;\n        },\n        accessibilityLabel: this.getAccessibilityLabel(),\n        editable: !disabled,\n        autoCorrect: false,\n        style: [styles_1.default.text, this.props.textStyle],\n        onChangeText: function onChangeText(text) {\n          _this2.onChangePhoneNumber(text);\n        },\n        keyboardType: \"phone-pad\",\n        underlineColorAndroid: \"rgba(0,0,0,0)\",\n        value: displayValue\n      }, this.props.textProps))), react_1.default.createElement(CountryPicker_1.default, {\n        ref: function ref(_ref2) {\n          _this2.picker = _ref2;\n        },\n        selectedCountry: iso2,\n        onSubmit: this.selectCountry,\n        buttonColor: this.props.pickerButtonColor,\n        cancelText: this.props.cancelText,\n        cancelTextStyle: this.props.cancelTextStyle,\n        confirmText: this.props.confirmText,\n        confirmTextStyle: this.props.confirmTextStyle,\n        pickerBackgroundColor: this.props.pickerBackgroundColor,\n        itemStyle: this.props.pickerItemStyle,\n        onPressCancel: this.props.onPressCancel,\n        onPressConfirm: this.props.onPressConfirm\n      }));\n    }\n  }], [{\n    key: \"setCustomCountriesData\",\n    value: function setCustomCountriesData(json) {\n      country_1.default.setCustomCountriesData(json);\n    }\n  }]);\n\n  return PhoneInput;\n}(react_1.default.Component);\n\nexports.default = PhoneInput;","map":{"version":3,"sources":["../src/PhoneInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'; // eslint-disable-line import/no-extraneous-dependencies, no-use-before-define\nimport {\n    Image, TextInput, TouchableOpacity, View\n} from 'react-native';\nimport Country from './country';\nimport Flags from './resources/flags';\nimport PhoneNumber from './PhoneNumber';\nimport styles from './styles';\nimport CountryPicker from './CountryPicker';\nimport { ReactNativePhoneInputProps } from './typings';\n\nexport default class PhoneInput<TextComponentType extends React.ComponentType = typeof TextInput>\n    extends React.Component<ReactNativePhoneInputProps<TextComponentType>, any> {\n    static setCustomCountriesData(json) {\n        Country.setCustomCountriesData(json);\n    }\n\n    private picker: any;\n\n    private inputPhone: any;\n\n    constructor(props) {\n        super(props);\n\n        let {\n            initialCountry, initialValue\n        } = this.props;\n\n        const {\n            countriesList, disabled\n        } = this.props;\n\n        if (countriesList) {\n            Country.setCustomCountriesData(countriesList);\n        }\n\n        let displayValue = '';\n\n        if (initialValue) {\n            if (initialValue[0] !== '+') {\n                initialValue = `+${initialValue}`;\n            }\n\n            initialCountry = PhoneNumber.getCountryCodeOfNumber(initialValue);\n            displayValue = this.format(initialValue, initialCountry);\n        } else {\n            const countryData = PhoneNumber.getCountryDataByCode(initialCountry);\n            initialValue = countryData ? `+${countryData.dialCode}` : '';\n            displayValue = initialValue;\n        }\n\n        this.state = {\n            disabled,\n            iso2: initialCountry,\n            displayValue,\n            value: initialValue,\n        };\n    }\n\n    componentDidUpdate() {\n        const { disabled } = this.props;\n        if (disabled !== this.state.disabled) {\n            this.setState({ disabled }); // eslint-disable-line react/no-did-update-set-state\n        }\n    }\n\n    onChangePhoneNumber = (number) => {\n        const actionAfterSetState = this.props.onChangePhoneNumber\n            ? (displayValue: string, iso2: string) => {\n                this.props.onChangePhoneNumber?.(displayValue, iso2);\n            }\n            : null;\n        this.updateValue(number, actionAfterSetState);\n    }\n\n    onPressFlag = () => {\n        if (this.props.onPressFlag) {\n            this.props.onPressFlag();\n        } else {\n            if (this.state.iso2) this.picker.selectCountry(this.state.iso2);\n            this.picker.show();\n        }\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getPickerData() {\n        return PhoneNumber.getAllCountries().map((country, index) => ({\n            key: index,\n            image: Flags.get(country.iso2),\n            label: country.name,\n            dialCode: `+${country.dialCode}`,\n            iso2: country.iso2\n        }));\n    }\n\n    getCountryCode() {\n        const countryData = PhoneNumber.getCountryDataByCode(this.state.iso2);\n        return countryData ? countryData.dialCode : null;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getAllCountries() {\n        return PhoneNumber.getAllCountries();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getFlag = (iso2) => Flags.get(iso2);\n\n    getDialCode() {\n        return PhoneNumber.getDialCode(this.state.value);\n    }\n\n    getValue(text?) {\n        return text ? text.replace(/[^0-9]/g, '') : this.state.value;\n    }\n\n    getNumberType() {\n        return PhoneNumber.getNumberType(\n            this.state.value,\n            this.state.iso2\n        );\n    }\n\n    getISOCode = () => this.state.iso2;\n\n    selectCountry = (iso2) => {\n        if (this.state.iso2 !== iso2) {\n            const countryData = PhoneNumber.getCountryDataByCode(iso2);\n            if (countryData) {\n                this.setState(\n                    {\n                        iso2,\n                        displayValue: this.format(`+${countryData.dialCode}`),\n                        value: `+${countryData.dialCode}`\n                    },\n                    () => {\n                        if (this.props.onSelectCountry) this.props.onSelectCountry(iso2);\n                    }\n                );\n            }\n        }\n    }\n\n    setValue = (number) => {\n        if (this.state.value !== number) {\n            this.updateValue(number);\n        }\n    }\n\n    isValidNumber() {\n        if (this.state.value.length < 4) return false;\n        return PhoneNumber.isValidNumber(\n            this.state.value,\n            this.state.iso2\n        );\n    }\n\n    format(text, iso2?) {\n        return this.props.autoFormat\n            ? PhoneNumber.format(text, iso2 || this.state.iso2)\n            : text;\n    }\n\n    updateValue(number, actionAfterSetState: any = null) {\n        let modifiedNumber = this.getValue(number);\n        const { allowZeroAfterCountryCode } = this.props;\n\n        if (modifiedNumber[0] !== '+' && number.length) {\n            modifiedNumber = `+${modifiedNumber}`;\n        }\n        modifiedNumber = allowZeroAfterCountryCode\n            ? modifiedNumber\n            : this.possiblyEliminateZeroAfterCountryCode(modifiedNumber);\n        const iso2: string = PhoneNumber.getCountryCodeOfNumber(modifiedNumber);\n\n        let countryDialCode;\n        if (iso2) {\n            const countryData = PhoneNumber.getCountryDataByCode(iso2);\n            countryDialCode = countryData.dialCode;\n        }\n\n        let displayValue;\n        if (modifiedNumber === `+${countryDialCode}`) {\n            displayValue = modifiedNumber;\n        } else {\n            displayValue = this.format(modifiedNumber);\n        }\n\n        this.setState({\n            iso2,\n            displayValue,\n            value: modifiedNumber,\n        }, () => {\n            if (actionAfterSetState) {\n                actionAfterSetState(displayValue, iso2);\n            }\n        });\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    possiblyEliminateZeroAfterCountryCode(number) {\n        const dialCode = PhoneNumber.getDialCode(number);\n        return number.startsWith(`${dialCode}0`)\n            ? dialCode + number.substr(dialCode.length + 1)\n            : number;\n    }\n\n    getAccessibilityLabel() {\n        return this.props.accessibilityLabel || 'Telephone input';\n    }\n\n    focus() {\n        this.inputPhone.focus();\n    }\n\n    blur() {\n        this.inputPhone.blur();\n    }\n\n    render() {\n        const { iso2, displayValue, disabled } = this.state;\n        const country = this.getAllCountries().find((c) => c.iso2 === iso2);\n        const TextComponent: any = this.props.textComponent || TextInput;\n        return (\n            <View style={[styles.container, this.props.style]}>\n                <TouchableOpacity\n                    onPress={this.onPressFlag}\n                    disabled={disabled}\n                    accessibilityRole=\"imagebutton\"\n                    accessibilityLabel={country ? country.name : iso2}\n                >\n                    {this.props.renderFlag ? (\n                        <>\n                            {this.props.renderFlag({\n                                imageSource: Flags.get(iso2),\n                            })}\n                        </>\n                    ) : (\n                        <Image\n                            accessibilityIgnoresInvertColors={true}\n                            source={Flags.get(iso2)}\n                            style={[styles.flag, this.props.flagStyle]}\n                        />\n                    )}\n                </TouchableOpacity>\n                <View style={{ flex: 1, marginLeft: this.props.offset || 10 }}>\n                    <TextComponent\n                        ref={(ref) => {\n                            this.inputPhone = ref;\n                        }}\n                        accessibilityLabel={this.getAccessibilityLabel()}\n                        editable={!disabled}\n                        autoCorrect={false}\n                        style={[styles.text, this.props.textStyle]}\n                        onChangeText={(text) => {\n                            this.onChangePhoneNumber(text);\n                        }}\n                        keyboardType=\"phone-pad\"\n                        underlineColorAndroid=\"rgba(0,0,0,0)\"\n                        value={displayValue}\n                        {...this.props.textProps}\n                    />\n                </View>\n\n                <CountryPicker\n                    ref={(ref) => {\n                        this.picker = ref;\n                    }}\n                    selectedCountry={iso2}\n                    onSubmit={this.selectCountry}\n                    buttonColor={this.props.pickerButtonColor}\n                    cancelText={this.props.cancelText}\n                    cancelTextStyle={this.props.cancelTextStyle}\n                    confirmText={this.props.confirmText}\n                    confirmTextStyle={this.props.confirmTextStyle}\n                    pickerBackgroundColor={this.props.pickerBackgroundColor}\n                    itemStyle={this.props.pickerItemStyle}\n                    onPressCancel={this.props.onPressCancel}\n                    onPressConfirm={this.props.onPressConfirm}\n                />\n            </View>\n        );\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}