{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { RNSharedElementTransition } from \"./web/index.web\";\nexport var RNSharedElementTransitionView = function (_React$Component) {\n  _inherits(RNSharedElementTransitionView, _React$Component);\n\n  var _super = _createSuper(RNSharedElementTransitionView);\n\n  function RNSharedElementTransitionView() {\n    var _this;\n\n    _classCallCheck(this, RNSharedElementTransitionView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      transition: new RNSharedElementTransition()\n    };\n\n    _this.onSetRef = function (ref) {\n      if (!ref) return;\n      var element = ref ? findNodeHandle(ref) : null;\n      var transition = _this.state.transition;\n      transition.element = element;\n    };\n\n    return _this;\n  }\n\n  _createClass(RNSharedElementTransitionView, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.transition.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        ref: this.onSetRef\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var startNode = props.startNode,\n          endNode = props.endNode,\n          animation = props.animation,\n          resize = props.resize,\n          align = props.align,\n          nodePosition = props.nodePosition;\n      var transition = state.transition;\n      transition.setNode(false, startNode.node, startNode.ancestor);\n      transition.setNode(true, endNode.node, endNode.ancestor);\n      transition.nodePosition = nodePosition;\n      transition.animation = animation;\n      transition.resize = resize;\n      transition.align = align;\n      transition.didSetProps();\n      return null;\n    }\n  }]);\n\n  return RNSharedElementTransitionView;\n}(React.Component);","map":{"version":3,"sources":["../src/RNSharedElementTransitionView.web.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAGA,SACE,yBADF;AA2BA,WAAa,6BAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;;IAAA;MAAA;IAAA;;IAAA;IAAA,MAIE,KAJF,GAIU;MACN,UAAU,EAAE,IAAI,yBAAJ;IADN,CAJV;;IAAA,MA8BU,QA9BV,GA8BqB,UAAC,GAAD,EAAa;MAC9B,IAAI,CAAC,GAAL,EAAU;MACV,IAAM,OAAO,GAAQ,GAAG,GAAG,cAAc,CAAC,GAAD,CAAjB,GAAyB,IAAjD;MACA,IAAQ,UAAR,GAAuB,MAAK,KAA5B,CAAQ,UAAR;MACA,UAAU,CAAC,OAAX,GAAqB,OAArB;IACD,CAnCH;;IAAA;EAAA;;EAAA;IAAA;IAAA,OAsBE,iCAAqB;MACnB,OAAO,KAAP;IACD;EAxBH;IAAA;IAAA,OA0BE,gCAAoB;MAClB,KAAK,KAAL,CAAW,UAAX,CAAsB,OAAtB;IACD;EA5BH;IAAA;IAAA,OAqCE,kBAAM;MAEJ,OAAO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;QAAC,GAAG,EAAE,KAAK;MAAX,CAAL,CAAP;IACD;EAxCH;IAAA;IAAA,OAQE,kCAAgC,KAAhC,EAAkD,KAAlD,EAAkE;MAChE,IAAQ,SAAR,GACE,KADF,CAAQ,SAAR;MAAA,IAAmB,OAAnB,GACE,KADF,CAAmB,OAAnB;MAAA,IAA4B,SAA5B,GACE,KADF,CAA4B,SAA5B;MAAA,IAAuC,MAAvC,GACE,KADF,CAAuC,MAAvC;MAAA,IAA+C,KAA/C,GACE,KADF,CAA+C,KAA/C;MAAA,IAAsD,YAAtD,GACE,KADF,CAAsD,YAAtD;MAEA,IAAQ,UAAR,GAAuB,KAAvB,CAAQ,UAAR;MACA,UAAU,CAAC,OAAX,CAAmB,KAAnB,EAA0B,SAAS,CAAC,IAApC,EAA0C,SAAS,CAAC,QAApD;MACA,UAAU,CAAC,OAAX,CAAmB,IAAnB,EAAyB,OAAO,CAAC,IAAjC,EAAuC,OAAO,CAAC,QAA/C;MACA,UAAU,CAAC,YAAX,GAA0B,YAA1B;MACA,UAAU,CAAC,SAAX,GAAuB,SAAvB;MACA,UAAU,CAAC,MAAX,GAAoB,MAApB;MACA,UAAU,CAAC,KAAX,GAAmB,KAAnB;MACA,UAAU,CAAC,WAAX;MACA,OAAO,IAAP;IACD;EApBH;;EAAA;AAAA,EAAmD,KAAK,CAAC,SAAzD","sourcesContent":["import * as React from \"react\";\nimport { View, findNodeHandle } from \"react-native\";\n\nimport {\n  RNSharedElementTransition,\n  RNSharedElementNodeConfig,\n  RNSharedElementAnimation,\n  RNSharedElementResize,\n  RNSharedElementAlign,\n} from \"./web/index.web\";\n\ntype PropsType = {\n  startNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  endNode: {\n    node: RNSharedElementNodeConfig | null;\n    ancestor: RNSharedElementNodeConfig | null;\n  };\n  nodePosition: number | any;\n  animation: RNSharedElementAnimation;\n  resize: RNSharedElementResize;\n  align: RNSharedElementAlign;\n  //onMeasure?: (event: SharedElementOnMeasureEvent) => void;\n};\ntype StateType = {\n  transition: RNSharedElementTransition;\n};\n\nexport class RNSharedElementTransitionView extends React.Component<\n  PropsType,\n  StateType\n> {\n  state = {\n    transition: new RNSharedElementTransition(),\n  };\n\n  static getDerivedStateFromProps(props: PropsType, state: StateType) {\n    const { startNode, endNode, animation, resize, align, nodePosition } =\n      props;\n    const { transition } = state;\n    transition.setNode(false, startNode.node, startNode.ancestor);\n    transition.setNode(true, endNode.node, endNode.ancestor);\n    transition.nodePosition = nodePosition;\n    transition.animation = animation;\n    transition.resize = resize;\n    transition.align = align;\n    transition.didSetProps();\n    return null;\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillUnmount() {\n    this.state.transition.destroy();\n  }\n\n  private onSetRef = (ref: any) => {\n    if (!ref) return;\n    const element: any = ref ? findNodeHandle(ref) : null;\n    const { transition } = this.state;\n    transition.element = element;\n  };\n\n  render() {\n    // console.log(\"RNSharedElementTransitionView.render\");\n    return <View ref={this.onSetRef} />;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}