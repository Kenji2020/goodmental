{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"children\", \"screenOptions\"],\n    _excluded2 = [\"children\"],\n    _excluded3 = [\"component\", \"name\", \"sharedElements\", \"sharedElementsConfig\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from \"@react-navigation/native\";\nimport { CardAnimationContext, StackView } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useSharedElementFocusEvents } from \"./SharedElementFocusEvents\";\nimport SharedElementRendererContext from \"./SharedElementRendererContext\";\nimport SharedElementRendererData from \"./SharedElementRendererData\";\nimport { SharedElementRendererProxy } from \"./SharedElementRendererProxy\";\nimport SharedElementRendererView from \"./SharedElementRendererView\";\nimport createSharedElementScene from \"./createSharedElementScene\";\nimport { EventEmitter } from \"./utils/EventEmitter\";\nvar _navigatorId = 1;\nexport default function createSharedElementStackNavigator(options) {\n  if (options && Object.keys(options).filter(function (key) {\n    return key !== \"name\" && key !== \"debug\";\n  }).length > 0) {\n    throw new Error(\"Invalid options specified to 'createSharedElementStackNavigator'. If you are using react-navigation 4, please import from 'react-navigation-shared-element/build/v4'\");\n  }\n\n  var navigatorId = options && options.name ? options.name : \"stack\" + _navigatorId;\n  _navigatorId++;\n  var debug = (options == null ? void 0 : options.debug) || false;\n  var rendererDataProxy = new SharedElementRendererProxy();\n  var emitter = new EventEmitter();\n\n  function SharedElementStackNavigator(_ref) {\n    var initialRouteName = _ref.initialRouteName,\n        children = _ref.children,\n        screenOptions = _ref.screenOptions,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    var defaultOptions = {\n      gestureEnabled: Platform.OS === \"ios\",\n      animationEnabled: Platform.OS !== \"web\"\n    };\n\n    var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n      initialRouteName: initialRouteName,\n      children: children,\n      screenOptions: typeof screenOptions === \"function\" ? function () {\n        return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n      } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n    }),\n        state = _useNavigationBuilder.state,\n        descriptors = _useNavigationBuilder.descriptors,\n        navigation = _useNavigationBuilder.navigation,\n        NavigationContent = _useNavigationBuilder.NavigationContent;\n\n    var rendererDataRef = React.useRef(null);\n    React.useEffect(function () {\n      return navigation.addListener == null ? void 0 : navigation.addListener(\"tabPress\", function (e) {\n        var isFocused = navigation.isFocused();\n        requestAnimationFrame(function () {\n          if (state.index > 0 && isFocused && !e.defaultPrevented) {\n            navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n              target: state.key\n            }));\n          }\n        });\n      });\n    }, [navigation, state.index, state.key]);\n\n    if (debug) {\n      React.useLayoutEffect(function () {\n        rendererDataProxy.addDebugRef();\n        return function cleanup() {\n          rendererDataProxy.releaseDebugRef();\n        };\n      }, []);\n    }\n\n    useSharedElementFocusEvents({\n      state: state,\n      emitter: emitter\n    });\n    return React.createElement(SharedElementRendererContext.Consumer, null, function (rendererData) {\n      if (!rendererData) {\n        rendererDataRef.current = rendererDataRef.current || new SharedElementRendererData();\n        rendererDataProxy.source = rendererDataRef.current;\n      } else {\n        rendererDataProxy.source = rendererData;\n      }\n\n      return React.createElement(SharedElementRendererContext.Provider, {\n        value: rendererDataProxy\n      }, React.createElement(NavigationContent, null, React.createElement(StackView, _objectSpread(_objectSpread({\n        detachInactiveScreens: Platform.OS !== \"android\"\n      }, rest), {}, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      })), rendererDataRef.current ? React.createElement(SharedElementRendererView, {\n        rendererData: rendererDataRef.current\n      }) : undefined));\n    });\n  }\n\n  var navigatorFactory = createNavigatorFactory(SharedElementStackNavigator);\n\n  var _navigatorFactory = navigatorFactory(),\n      Navigator = _navigatorFactory.Navigator,\n      Screen = _navigatorFactory.Screen;\n\n  function wrapScreen(_) {\n    return null;\n  }\n\n  function getSharedElementsChildrenProps(children) {\n    return React.Children.toArray(children).reduce(function (acc, child) {\n      if (React.isValidElement(child)) {\n        if (child.type === wrapScreen) {\n          acc.push(child.props);\n        }\n\n        if (child.type === React.Fragment) {\n          acc.push.apply(acc, _toConsumableArray(getSharedElementsChildrenProps(child.props.children)));\n        }\n      }\n\n      return acc;\n    }, []);\n  }\n\n  function WrapNavigator(props) {\n    var children = props.children,\n        restProps = _objectWithoutProperties(props, _excluded2);\n\n    var wrappedComponentsCache = React.useRef(new Map());\n    var screenChildrenProps = getSharedElementsChildrenProps(children);\n    return React.createElement(Navigator, _objectSpread({}, restProps), screenChildrenProps.map(function (_ref2) {\n      var component = _ref2.component,\n          name = _ref2.name,\n          sharedElements = _ref2.sharedElements,\n          sharedElementsConfig = _ref2.sharedElementsConfig,\n          restChildrenProps = _objectWithoutProperties(_ref2, _excluded3);\n\n      sharedElements = sharedElements || sharedElementsConfig;\n\n      if (sharedElementsConfig) {\n        console.warn(\"The `sharedElementsConfig` prop has been renamed, use `sharedElements` instead.\");\n      }\n\n      var wrappedComponent = wrappedComponentsCache.current.get(name);\n\n      if (!wrappedComponent || wrappedComponent.config.Component !== component) {\n        wrappedComponent = createSharedElementScene(component, sharedElements, rendererDataProxy, emitter, CardAnimationContext, navigatorId, debug);\n        wrappedComponentsCache.current.set(name, wrappedComponent);\n      } else {\n        wrappedComponent.config.sharedElements = sharedElements;\n      }\n\n      return React.createElement(Screen, _objectSpread({\n        key: name,\n        name: name,\n        component: wrappedComponent\n      }, restChildrenProps));\n    }));\n  }\n\n  return {\n    Navigator: WrapNavigator,\n    Screen: wrapScreen\n  };\n}","map":{"version":3,"sources":["../src/createSharedElementStackNavigator.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  RouteConfig,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActionHelpers,\n  ParamListBase,\n  StackActions,\n  EventArg,\n} from \"@react-navigation/native\";\nimport {\n  CardAnimationContext,\n  StackView,\n  StackNavigationOptions,\n  createStackNavigator,\n} from \"@react-navigation/stack\";\nimport {\n  StackNavigationConfig,\n  StackNavigationEventMap,\n} from \"@react-navigation/stack/lib/typescript/src/types\";\nimport * as React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { useSharedElementFocusEvents } from \"./SharedElementFocusEvents\";\nimport SharedElementRendererContext from \"./SharedElementRendererContext\";\nimport SharedElementRendererData from \"./SharedElementRendererData\";\nimport { SharedElementRendererProxy } from \"./SharedElementRendererProxy\";\nimport SharedElementRendererView from \"./SharedElementRendererView\";\nimport createSharedElementScene from \"./createSharedElementScene\";\nimport {\n  SharedElementSceneComponent,\n  SharedElementsComponentConfig,\n} from \"./types\";\nimport { EventEmitter } from \"./utils/EventEmitter\";\n\nlet _navigatorId = 1;\n\nexport default function createSharedElementStackNavigator<\n  ParamList extends ParamListBase\n>(options?: { name?: string; debug?: boolean }) {\n  // Verify that no other options than 'name' or 'debug' are provided.\n  // This might indicate that the user is still using navigation 4 but\n  // didn't change the import to `react-navigation-shared-element/build/v4`.\n  if (\n    options &&\n    Object.keys(options).filter((key) => key !== \"name\" && key !== \"debug\")\n      .length > 0\n  ) {\n    throw new Error(\n      `Invalid options specified to 'createSharedElementStackNavigator'. If you are using react-navigation 4, please import from 'react-navigation-shared-element/build/v4'`\n    );\n  }\n\n  const navigatorId =\n    options && options.name ? options.name : `stack${_navigatorId}`;\n  _navigatorId++;\n  const debug = options?.debug || false;\n\n  const rendererDataProxy = new SharedElementRendererProxy();\n\n  const emitter = new EventEmitter();\n\n  type Props = React.ComponentProps<\n    ReturnType<typeof createStackNavigator>[\"Navigator\"]\n  > &\n    StackRouterOptions &\n    StackNavigationConfig;\n\n  function SharedElementStackNavigator({\n    initialRouteName,\n    children,\n    screenOptions,\n    ...rest\n  }: Props) {\n    const defaultOptions = {\n      gestureEnabled: Platform.OS === \"ios\",\n      animationEnabled: Platform.OS !== \"web\",\n    };\n    const { state, descriptors, navigation, NavigationContent } =\n      useNavigationBuilder<\n        StackNavigationState<ParamListBase>,\n        StackRouterOptions,\n        StackActionHelpers<ParamListBase>,\n        StackNavigationOptions,\n        StackNavigationEventMap\n      >(StackRouter, {\n        initialRouteName,\n        children,\n        screenOptions:\n          typeof screenOptions === \"function\"\n            ? (...args) => ({\n                ...defaultOptions,\n                ...screenOptions(...args),\n              })\n            : {\n                ...defaultOptions,\n                ...screenOptions,\n              },\n      });\n\n    const rendererDataRef = React.useRef<SharedElementRendererData | null>(\n      null\n    );\n\n    React.useEffect(\n      () =>\n        navigation.addListener?.(\"tabPress\", (e) => {\n          const isFocused = navigation.isFocused();\n\n          // Run the operation in the next frame so we're sure all listeners have been run\n          // This is necessary to know if preventDefault() has been called\n          requestAnimationFrame(() => {\n            if (\n              state.index > 0 &&\n              isFocused &&\n              !(e as EventArg<\"tabPress\", true>).defaultPrevented\n            ) {\n              // When user taps on already focused tab and we're inside the tab,\n              // reset the stack to replicate native behaviour\n              navigation.dispatch({\n                ...StackActions.popToTop(),\n                target: state.key,\n              });\n            }\n          });\n        }),\n      [navigation, state.index, state.key]\n    );\n\n    if (debug) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React.useLayoutEffect(() => {\n        rendererDataProxy.addDebugRef();\n        return function cleanup() {\n          rendererDataProxy.releaseDebugRef();\n        };\n      }, []);\n    }\n\n    useSharedElementFocusEvents({ state, emitter });\n\n    return (\n      <SharedElementRendererContext.Consumer>\n        {(rendererData) => {\n          // In case a renderer is already present higher up in the chain\n          // then don't bother creating a renderer here, but use that one instead\n          if (!rendererData) {\n            rendererDataRef.current =\n              rendererDataRef.current || new SharedElementRendererData();\n            rendererDataProxy.source = rendererDataRef.current;\n          } else {\n            rendererDataProxy.source = rendererData;\n          }\n          return (\n            <SharedElementRendererContext.Provider value={rendererDataProxy}>\n              <NavigationContent>\n                <StackView\n                  detachInactiveScreens={Platform.OS !== \"android\"}\n                  {...rest}\n                  state={state}\n                  descriptors={descriptors}\n                  navigation={navigation}\n                />\n                {rendererDataRef.current ? (\n                  <SharedElementRendererView\n                    rendererData={rendererDataRef.current}\n                  />\n                ) : undefined}\n              </NavigationContent>\n            </SharedElementRendererContext.Provider>\n          );\n        }}\n      </SharedElementRendererContext.Consumer>\n    );\n  }\n\n  const navigatorFactory = createNavigatorFactory<\n    StackNavigationState<ParamList>,\n    StackNavigationOptions,\n    StackNavigationEventMap,\n    typeof SharedElementStackNavigator\n  >(SharedElementStackNavigator);\n\n  const { Navigator, Screen } = navigatorFactory<ParamList>();\n\n  type ScreenProps<RouteName extends keyof ParamList> = Omit<\n    RouteConfig<\n      ParamList,\n      RouteName,\n      StackNavigationState<ParamList>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >,\n    \"component\" | \"children\"\n  > & {\n    component: SharedElementSceneComponent<any>;\n    sharedElements?: SharedElementsComponentConfig;\n\n    /**\n     * @deprecated\n     * The `sharedElementsConfig` prop has been renamed, use `sharedElements` instead.\n     */\n    sharedElementsConfig?: SharedElementsComponentConfig;\n  };\n\n  // Wrapping Screen to explicitly statically type a \"Shared Element\" Screen.\n  function wrapScreen<RouteName extends keyof ParamList>(\n    _: ScreenProps<RouteName>\n  ) {\n    return null;\n  }\n\n  type NavigatorProps = React.ComponentProps<typeof Navigator>;\n\n  function getSharedElementsChildrenProps(children: React.ReactNode) {\n    return React.Children.toArray(children).reduce<any[]>((acc, child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === wrapScreen) {\n          acc.push(child.props);\n        }\n\n        if (child.type === React.Fragment) {\n          acc.push(...getSharedElementsChildrenProps(child.props.children));\n        }\n      }\n      return acc;\n    }, []);\n  }\n\n  // react-navigation only allows the Screen component as direct children\n  // of Navigator, this is why we need to wrap the Navigator\n  function WrapNavigator(props: NavigatorProps) {\n    const { children, ...restProps } = props;\n    const wrappedComponentsCache = React.useRef<Map<string, any>>(new Map());\n    const screenChildrenProps = getSharedElementsChildrenProps(children);\n\n    return (\n      <Navigator {...restProps}>\n        {screenChildrenProps.map(\n          ({\n            component,\n            name,\n            sharedElements,\n            sharedElementsConfig,\n            ...restChildrenProps\n          }) => {\n            sharedElements = sharedElements || sharedElementsConfig;\n\n            // Show warning when deprecated `sharedElementsConfig` prop was used\n            if (sharedElementsConfig) {\n              console.warn(\n                \"The `sharedElementsConfig` prop has been renamed, use `sharedElements` instead.\"\n              );\n            }\n\n            // Check whether this component was previously already wrapped\n            let wrappedComponent = wrappedComponentsCache.current.get(name);\n            if (\n              !wrappedComponent ||\n              wrappedComponent.config.Component !== component\n            ) {\n              // Wrap the component\n              wrappedComponent = createSharedElementScene(\n                component,\n                sharedElements,\n                rendererDataProxy,\n                emitter,\n                CardAnimationContext,\n                navigatorId,\n                debug\n              );\n              wrappedComponentsCache.current.set(name, wrappedComponent);\n            } else {\n              // Shared elements function might have been changed, so update it\n              wrappedComponent.config.sharedElements = sharedElements;\n            }\n\n            return (\n              <Screen\n                key={name}\n                name={name}\n                component={wrappedComponent}\n                {...restChildrenProps}\n              />\n            );\n          }\n        )}\n      </Navigator>\n    );\n  }\n\n  return {\n    Navigator: WrapNavigator,\n    Screen: wrapScreen,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}