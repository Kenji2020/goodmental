{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar google_libphonenumber_1 = __importDefault(require(\"google-libphonenumber\"));\n\nvar country_1 = __importDefault(require(\"./country\"));\n\nvar numberType_json_1 = __importDefault(require(\"./resources/numberType.json\"));\n\nvar phoneUtil = google_libphonenumber_1.default.PhoneNumberUtil.getInstance();\nvar asYouTypeFormatter = google_libphonenumber_1.default.AsYouTypeFormatter;\n\nvar PhoneNumber = function () {\n  function PhoneNumber() {\n    _classCallCheck(this, PhoneNumber);\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return country_1.default.getAll();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(number) {\n      var dialCode = '';\n\n      if (number.charAt(0) === '+') {\n        var numericChars = '';\n\n        for (var i = 0; i < number.length; i++) {\n          var c = number.charAt(i);\n\n          if (this.isNumeric(c)) {\n            numericChars += c;\n\n            if (country_1.default.getCountryCodes()[numericChars]) {\n              dialCode = number.substr(0, i + 1);\n            }\n\n            if (numericChars.length === 4) {\n              break;\n            }\n          }\n        }\n      }\n\n      return dialCode;\n    }\n  }, {\n    key: \"getNumeric\",\n    value: function getNumeric(str) {\n      return str.replace(/\\D/g, '');\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !Number.isNaN(parseFloat(n)) && Number.isFinite(Number(n));\n    }\n  }, {\n    key: \"getCountryCodeOfNumber\",\n    value: function getCountryCodeOfNumber(number) {\n      var dialCode = this.getDialCode(number);\n      var numeric = this.getNumeric(dialCode);\n      var countryCode = country_1.default.getCountryCodes()[numeric];\n\n      if (countryCode) {\n        return lodash_1.default.first(countryCode.filter(function (iso2) {\n          return iso2;\n        }));\n      }\n\n      return '';\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(number, iso2) {\n      try {\n        return phoneUtil.parse(number, iso2);\n      } catch (err) {\n        console.log(\"Exception was thrown: \" + err.toString());\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n\n      if (phoneInfo) {\n        return phoneUtil.isValidNumber(phoneInfo);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, iso2) {\n      var formatter = new asYouTypeFormatter(iso2);\n      var formatted;\n      number.replace(/-/g, '').replace(/ /g, '').replace(/\\(/g, '').replace(/\\)/g, '').split('').forEach(function (n) {\n        formatted = formatter.inputDigit(n);\n      });\n      return formatted;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      var typeIndex = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n      return lodash_1.default.findKey(numberType_json_1.default, function (noType) {\n        return noType === typeIndex;\n      });\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return country_1.default.getCountryDataByCode(iso2);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexports.default = new PhoneNumber();","map":{"version":3,"sources":["../src/PhoneNumber.tsx"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport libPhoneNumber from 'google-libphonenumber';\n\nimport Country from './country';\nimport countries from './resources/countries.json'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport numberType from './resources/numberType.json'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nconst phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nconst asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\n\nclass PhoneNumber {\n    // eslint-disable-next-line class-methods-use-this\n    getAllCountries() {\n        return Country.getAll();\n    }\n\n    getDialCode(number) {\n        let dialCode = '';\n        // only interested in international numbers (starting with a plus)\n        if (number.charAt(0) === '+') {\n            let numericChars = '';\n            // iterate over chars\n            for (let i = 0; i < number.length; i++) {\n                const c = number.charAt(i);\n                // if char is number\n                if (this.isNumeric(c)) {\n                    numericChars += c;\n                    // if current numericChars make a valid dial code\n                    // if (this.countryCodes[numericChars]) {\n                    if (Country.getCountryCodes()[numericChars]) {\n                        // store the actual raw string (useful for matching later)\n                        dialCode = number.substr(0, i + 1);\n                    }\n                    // longest dial code is 4 chars\n                    if (numericChars.length === 4) {\n                        break;\n                    }\n                }\n            }\n        }\n        return dialCode;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getNumeric(str) {\n        return str.replace(/\\D/g, '');\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    isNumeric(n) {\n        return !Number.isNaN(parseFloat(n)) && Number.isFinite(Number(n));\n    }\n\n    getCountryCodeOfNumber(number) {\n        const dialCode = this.getDialCode(number);\n        const numeric = this.getNumeric(dialCode);\n        const countryCode = Country.getCountryCodes()[numeric];\n\n        // countryCode[0] can be null -> get first element that is not null\n        if (countryCode) {\n            return _.first(countryCode.filter((iso2: any) => iso2));\n        }\n\n        return '';\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    parse(number, iso2) {\n        try {\n            return phoneUtil.parse(number, iso2);\n        } catch (err) {\n            console.log(`Exception was thrown: ${err.toString()}`);\n            return null;\n        }\n    }\n\n    isValidNumber(number, iso2) {\n        const phoneInfo = this.parse(number, iso2);\n\n        if (phoneInfo) {\n            return phoneUtil.isValidNumber(phoneInfo);\n        }\n\n        return false;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    format(number, iso2) {\n        const formatter = new asYouTypeFormatter(iso2); // eslint-disable-line new-cap\n        let formatted;\n\n        number.replace(/-/g, '')\n            .replace(/ /g, '')\n            .replace(/\\(/g, '')\n            .replace(/\\)/g, '')\n            .split('')\n            .forEach((n: any) => {\n                formatted = formatter.inputDigit(n);\n            });\n\n        return formatted;\n    }\n\n    getNumberType(number, iso2) {\n        const phoneInfo = this.parse(number, iso2);\n        const typeIndex = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n        return _.findKey(numberType, (noType) => noType === typeIndex);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getCountryDataByCode(iso2) {\n        return Country.getCountryDataByCode(iso2);\n    }\n}\n\nexport default new PhoneNumber();\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}