{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"onNode\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nexport function nodeFromRef(ref, isParent, parentInstance) {\n  var nodeHandle = ref ? findNodeHandle(ref) : undefined;\n  return nodeHandle ? {\n    ref: ref,\n    nodeHandle: nodeHandle,\n    isParent: isParent || false,\n    parentInstance: parentInstance\n  } : null;\n}\nexport var SharedElement = function (_React$Component) {\n  _inherits(SharedElement, _React$Component);\n\n  var _super = _createSuper(SharedElement);\n\n  function SharedElement() {\n    var _this;\n\n    _classCallCheck(this, SharedElement);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._node = null;\n\n    _this.onSetRef = function (ref) {\n      _this._node = nodeFromRef(ref, true, _assertThisInitialized(_this));\n\n      if (_this.props.onNode) {\n        _this.props.onNode(_this._node);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SharedElement, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.onNode && this.props.onNode && this._node) {\n        this.props.onNode(this._node);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onNode = _this$props.onNode,\n          otherProps = _objectWithoutProperties(_this$props, _excluded);\n\n      return React.createElement(View, _objectSpread({\n        ref: this.onSetRef,\n        collapsable: false\n      }, otherProps));\n    }\n  }]);\n\n  return SharedElement;\n}(React.Component);","map":{"version":3,"sources":["../src/SharedElement.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;AAUA,OAAM,SAAU,WAAV,CACJ,GADI,EAEJ,QAFI,EAGJ,cAHI,EAGgB;EAEpB,IAAM,UAAU,GAAG,GAAG,GAAG,cAAc,CAAC,GAAD,CAAjB,GAAyB,SAA/C;EACA,OAAO,UAAU,GACb;IACE,GAAG,EAAH,GADF;IAEE,UAAU,EAAV,UAFF;IAGE,QAAQ,EAAE,QAAQ,IAAI,KAHxB;IAIE,cAAc,EAAd;EAJF,CADa,GAOb,IAPJ;AAQD;AAED,WAAa,aAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;;IAAA;MAAA;IAAA;;IAAA;IAAA,MAOU,KAPV,GAO4C,IAP5C;;IAAA,MASU,QATV,GASqB,UAAC,GAAD,EAAa;MAC9B,MAAK,KAAL,GAAa,WAAW,CAAC,GAAD,EAAM,IAAN,gCAAxB;;MACA,IAAI,MAAK,KAAL,CAAW,MAAf,EAAuB;QACrB,MAAK,KAAL,CAAW,MAAX,CAAkB,MAAK,KAAvB;MACD;IACF,CAdH;;IAAA;EAAA;;EAAA;IAAA;IAAA,OACE,4BAAmB,SAAnB,EAAgD;MAC9C,IAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,KAAK,KAAL,CAAW,MAAhC,IAA0C,KAAK,KAAnD,EAA0D;QACxD,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,KAAvB;MACD;IACF;EALH;IAAA;IAAA,OAgBE,kBAAM;MACJ,kBAGI,KAAK,KAHT;MAAA,IACE,MADF,eACE,MADF;MAAA,IAEK,UAFL;;MAIA,OAAO,KAAA,CAAA,aAAA,CAAC,IAAD;QAAM,GAAG,EAAE,KAAK,QAAhB;QAA0B,WAAW,EAAE;MAAvC,GAAkD,UAAlD,EAAP;IACD;EAtBH;;EAAA;AAAA,EAAmC,KAAK,CAAC,SAAzC","sourcesContent":["import * as React from \"react\";\nimport { View, findNodeHandle, ViewProps } from \"react-native\";\n\nimport { SharedElementNode } from \"./types\";\n\nexport type SharedElementProps = ViewProps & {\n  children: React.ReactNode;\n  onNode: (node: SharedElementNode | null) => void;\n};\n\nexport function nodeFromRef(\n  ref: any,\n  isParent?: boolean,\n  parentInstance?: any\n): SharedElementNode | null {\n  const nodeHandle = ref ? findNodeHandle(ref) : undefined;\n  return nodeHandle\n    ? {\n        ref,\n        nodeHandle,\n        isParent: isParent || false,\n        parentInstance,\n      }\n    : null;\n}\n\nexport class SharedElement extends React.Component<SharedElementProps> {\n  componentDidUpdate(prevProps: SharedElementProps) {\n    if (!prevProps.onNode && this.props.onNode && this._node) {\n      this.props.onNode(this._node);\n    }\n  }\n\n  private _node: SharedElementNode | null = null;\n\n  private onSetRef = (ref: any) => {\n    this._node = nodeFromRef(ref, true, this);\n    if (this.props.onNode) {\n      this.props.onNode(this._node);\n    }\n  };\n\n  render() {\n    const {\n      onNode, //eslint-disable-line @typescript-eslint/no-unused-vars\n      ...otherProps\n    } = this.props;\n    return <View ref={this.onSetRef} collapsable={false} {...otherProps} />;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}